# Generated by Django 5.1.2 on 2025-01-14 23:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Batch_ID', models.IntegerField(unique=True)),
                ('Batch_name', models.CharField(max_length=100)),
                ('Year', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Room_ID', models.IntegerField(unique=True)),
                ('Room_no', models.CharField(max_length=50)),
                ('Max_capacity', models.PositiveIntegerField()),
                ('Floor', models.IntegerField()),
                ('Room_type', models.CharField(max_length=100)),
                ('Multimedia', models.BooleanField(default=False)),
                ('Speaker', models.BooleanField(default=False)),
                ('Room_status', models.CharField(choices=[('enable', 'Enable'), ('disable', 'Disable')], default='enable', max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Teacher_ID', models.IntegerField(unique=True)),
                ('Name', models.CharField(max_length=100)),
                ('NIC', models.CharField(max_length=20, unique=True)),
                ('Email', models.EmailField(max_length=254, unique=True)),
                ('Phone', models.CharField(blank=True, max_length=15, null=True)),
                ('Max_classes', models.PositiveIntegerField()),
                ('Health_limitation', models.CharField(blank=True, max_length=255, null=True)),
                ('Seniority', models.CharField(blank=True, max_length=50, null=True)),
                ('Teacher_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Year',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.PositiveIntegerField()),
                ('academic_start', models.DateField()),
                ('academic_end', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('deo', 'DEO'), ('advisor', 'Advisor'), ('chairman', 'Chairman')], max_length=10)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('staff_id', models.CharField(max_length=20, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chairman',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Course_ID', models.IntegerField(unique=True)),
                ('Course_name', models.CharField(max_length=100)),
                ('Course_code', models.CharField(max_length=20, unique=True)),
                ('Max_classes_per_day', models.PositiveIntegerField()),
                ('Credit_hours', models.PositiveIntegerField()),
                ('Course_desc', models.TextField(blank=True, null=True)),
                ('Batch_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='users.batch')),
            ],
        ),
        migrations.CreateModel(
            name='DEO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Advisor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('password', models.CharField(max_length=128)),
                ('year', models.CharField(choices=[('first', 'First'), ('second', 'Second'), ('third', 'Third'), ('fourth', 'Fourth')], max_length=10)),
                ('faculty', models.CharField(max_length=100)),
                ('seniority', models.CharField(choices=[('professor', 'Professor'), ('associate_professor', 'Associate Professor'), ('assistant_professor', 'Assistant Professor'), ('lecturer', 'Lecturer'), ('it_manager_sr', 'IT Manager (Sr)'), ('it_manager_jr', 'IT Manager (Jr)')], max_length=20)),
                ('deo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advisors', to='users.deo')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('chairman', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='head_of_department', to='users.chairman')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Section_ID', models.IntegerField(unique=True)),
                ('Section_name', models.CharField(max_length=50)),
                ('Max_students', models.PositiveIntegerField()),
                ('Max_gaps', models.PositiveIntegerField()),
                ('Batch_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='users.batch')),
            ],
        ),
        migrations.CreateModel(
            name='BatchCourseTeacherAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Assignment_ID', models.IntegerField(unique=True)),
                ('Batch_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_course_teacher_assignments', to='users.batch')),
                ('Course_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_course_teacher_assignments', to='users.course')),
                ('Section_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_course_teacher_assignments', to='users.section')),
                ('Teacher_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_course_teacher_assignments', to='users.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherCourseAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Assignment_ID', models.IntegerField(unique=True)),
                ('Teacher_type', models.CharField(choices=[('lab', 'Lab'), ('theory', 'Theory')], max_length=10)),
                ('Course_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_assignments', to='users.course')),
                ('Teacher_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_assignments', to='users.teacher')),
            ],
        ),
    ]
